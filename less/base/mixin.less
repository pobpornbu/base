//_________________ Input __________________

.input-style(@bg; @color; @border) {
  .checkborder(@border);
	.borderstyle();
	.checkbg(@bg);
	.bgstyle();
	.checkcolor(@color);
	.colorstyle();
}

.input-border(@border){
  .checkborder(@border);
	.borderstyle();
}

.input-bg(@bg){
  .checkbg(@bg);
	.bgstyle();
}

.input-color(@color){
	.checkcolor(@color);
	.colorstyle();
}

.input-radio-checkbox-color(@color, @el){
	.checkcolorcontent(@color, @el);
	.colorstylecontent();
}

	.checkborder(@border) {
		.borderstyle() when (iscolor(@border)) {
			border: 1px solid @border;
			&:hover, &:focus, &:active, &.active, &:disabled, &.disabled {
				border: 1px solid @border;
			}
		}
		.borderstyle() when not (iscolor(@border)) {
			border: 1px solid extract(@border,1);
			&:hover {
				border: 1px solid extract(@border, 2);
			}
			&:focus, &:active, &.active {
				border: 1px solid extract(@border, 3);
			}
			&:disabled, &.disabled {
				border: 1px solid extract(@border, 4);
			}
		}
	}
	.checkbg(@bg) {
		.bgstyle() when (iscolor(@bg)) {
			background-color: @bg;
			&:hover, &:focus, &:active, &.active, &:disabled, &.disabled {
				background-color: @bg;
			}
		}
		.bgstyle() when not (iscolor(@bg)) {
			background-color: extract(@bg,1);
			&:hover {
				background-color: extract(@bg,2);
			}
			&:focus, &:active, &.active {
				background-color: extract(@bg,3);
			}
			&:disabled, &.disabled {
				background-color: extract(@bg,4);
			}
		}
	}
	.checkcolor(@color) {
		.colorstyle() when (iscolor(@color)) {
			color: @color;
			&:hover, &:focus, &:active, &.active, &:disabled, &.disabled {
				color: @color;
			}
		}
		.colorstyle() when not (iscolor(@color)) {
			color: extract(@color,1);
			&:hover {
				color: extract(@color,2);
			}
			&:focus, &:active, &.active {
				color: extract(@color,3);
			}
			&:disabled, &.disabled {
				color: extract(@color,4);
			}
		}
	}

	.checkcolorcontent(@color, @el) {
		.colorstylecontent() when (iscolor(@color)) {
			color: @color;
			&:hover:@{el}, &:focus:@{el}, &:active:@{el}, &.active:@{el}, &:disabled:@{el}, &.disabled:@{el} {
				color: @color;
			}
		}
		.colorstylecontent() when not (iscolor(@color)) {
			color: extract(@color,1);
			&:hover:@{el} {
				color: extract(@color,2);
			}
			&:focus:@{el}, &:active:@{el}, &.active:@{el} {
				color: extract(@color,3);
			}
			&:disabled:@{el}, &.disabled:@{el} {
				color: extract(@color,4);
			}
		}
	}

.generate-color(@n, @property, @i: 1) when (@i =< @n) {
	@title : extract(@category-title, @i);
  &.@{title} {
    @{property}: extract(@category, @i);
  }
  .generate-color(@n, @property, @i + 1);
}

.color-category(@property; @color) {
	@{property} : @color ;
}

.generate-header-color(@n, @i: 1) when (@i =< @n) {
	@title : extract(@category-title, @i);
	.header__wrap.\--category.\--@{title} {
	  border-bottom: 5px solid extract(@category, @i);
	  .header__text {
		  background-color: extract(@category, @i);
			&:after {
	      border-left: 10px solid extract(@category, @i);
	      border-bottom: 17px solid extract(@category, @i);
			}
		}
	}
	.generate-header-color(@n, @i + 1);
}

.generate-header-middleline-color(@n, @i: 1) when (@i =< @n) {
	@title : extract(@category-title, @i);
	.header.\--middleline.\--@{title} {
		color: extract(@category, @i);
		line-height: 1.5;
		span {
			&:before, &:after {
				background-color: extract(@category, @i);
			}
		}
	}
	.generate-header-middleline-color(@n, @i + 1);
}

.generate-header-dotted-color(@n, @i: 1) when (@i =< @n) {
	@title : extract(@category-title, @i);
	.header__wrap.\--dotted.\--@{title} {
		&:after {
	  	background-color: extract(@category, @i);
		}
		.header__text {
			color: extract(@category, @i);
		}
	}
	.generate-header-dotted-color(@n, @i + 1);
}

.link-state(@color) when (iscolor(@color)) {
    color: inherit;
    &:hover {
        color: lighten(@color, 10%);
    }
    &:focus, &:active, &.active {
        color: darken(@color, 10%);
    }
    &:disabled, &.disabled {
        color: @disabled;
    }
}
//__________________Icon____________________

.icon-iconicon(@icon){
	content: @icon;
	display: inline-block;
  font-family: "Ionicons", Tahoma, sans-serif;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  text-rendering: auto;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
}
.icon-fontawesome(@icon) {
	content: @icon;
	display: inline-block;
  font: normal normal normal FontAwesome, Tahoma, sans-serif;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  transform: translate(0, 0);
}

.icon-style(@font-size: 30px; @color: @icon-primary-color-theme){
	font-size: @font-size;
	color: extract(@color,1);
	&:hover {
		color: extract(@color,2);
	}
	&:focus, &:active, &.active {
		color: extract(@color,3);
	}
	&:disable, &.disable {
		color: extract(@color,4);
	}
}

.bottom-line {
	padding-bottom: 15px;
  border-bottom: 1px solid @gray-light;
  @media screen and (min-width: @screen-sm-min) {
  	padding-bottom: 0;
  	border-bottom: none;
  }
}

.gap(@dir: top; @level: xs) {
	.checkdir(@dir);
	.dir();
}
	.checkdir(@dir) {
		.dir() when (@dir = h) {
			.mg-h(@level);
			.level-h();
		}
		.dir() when (@dir = v) {
			.mg-v(@level);
			.level-v();
		}
		.dir() when (default()) {
			.mg(@level);
			.level();
		}
	}

		.mg-h(@level) {
			.level-h() when (@level = xs) {
				margin: 0 5px;
			}
			.level-h() when (@level = sm) {
				margin: 0 10px;
			}
			.level-h() when (@level = md) {
				margin: 0 15px;
			}
			.level-h() when (@level = lg) {
				margin: 0 20px;
			}
			.level-h() when (@level = row) {
				margin: 0 30px;
			}
		}

		.mg-v(@level) {
			.level-v() when (@level = xs) {
				margin: 5px 0;
			}
			.level-v() when (@level = sm) {
				margin: 10px 0;
			}
			.level-v() when (@level = md) {
				margin: 15px 0;
			}
			.level-v() when (@level = lg) {
				margin: 20px 0;
			}
			.level-v() when (@level = row) {
				margin: 30px 0;
			}
		}

		.mg(@level) {
			.level() when (@level = xs) {
				margin-@{dir}: 5px;
			}
			.level() when (@level = sm) {
				margin-@{dir}: 10px;
			}
			.level() when (@level = md) {
				margin-@{dir}: 15px;
			}
			.level() when (@level = lg) {
				margin-@{dir}: 20px;
			}
			.level() when (@level = row) {
				margin-@{dir}: 30px;
			}
		}

.tablet-up(@rules) {
  @media screen and (min-width: 768px) { @rules(); }
}
.desktop-up(@rules) {
  @media screen and (min-width: 992px) { @rules(); }
}
